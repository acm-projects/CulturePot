import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'showfriends.dart'; // Import your ShowFriendsPage widget here
import './main.dart'; 

class UserListScreen extends StatelessWidget {
  final FirebaseAuth _auth = FirebaseAuth.instance;

  Future<void> addFriend(FirebaseAuth auth, String userId, String userEmail, String userobj) async {
    try {
      await FirebaseFirestore.instance.collection('users').doc(auth.currentUser?.uid).update({
        'friends': FieldValue.arrayUnion([userId]),
      });
      // Optionally, you can show a message or perform other actions upon successfully adding the friend
    } catch (e) {
      print('Error adding friend: $e');
      // Handle error, show error message, etc.
    }
  }

  @override
  Widget build(BuildContext context) {
    FirebaseAuth _auth = FirebaseAuth.instance;
    return Scaffold(
      appBar: AppBar(
        title: Text('User Emails'),
        actions: [
          IconButton(
            icon: Icon(Icons.people),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => ShowFriendsPage()),
              );
            },
          ),
        ],
      ),
      body: StreamBuilder(
        stream: FirebaseFirestore.instance.collection('users').snapshots(),
        builder: (context, AsyncSnapshot<QuerySnapshot> snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(
              child: CircularProgressIndicator(),
            );
          }
          if (snapshot.hasError) {
            return Center(
              child: Text('Error: ${snapshot.error}'),
            );
          }
          final users = snapshot.data?.docs ?? [];
          return ListView.builder(
            itemCount: users.length,
            itemBuilder: (context, index) {
              final email = users[index].get('email');
              final userId = users[index].get('uid');
              final userobj = users[index].id;
              // Check if the email is not equal to the current user's email
              if (email != _auth.currentUser?.email) {
                return ListTile(
                  title: Text(email),
                  trailing: ElevatedButton(
                    onPressed: () {
                      // Call addFriend function to add the friend
                      addFriend(_auth, userId, email, userobj);
                    },
                    child: Text('Add Friend'),
                  ),
                );
              } else {
                return SizedBox.shrink(); // Skip the current user's email
              }
            },
          );
        },
      ),
      floatingActionButton: Column(
        mainAxisAlignment: MainAxisAlignment.end,
        crossAxisAlignment: CrossAxisAlignment.end,
        children: [
          SizedBox(height: 16), // Add space between the buttons
          ElevatedButton(
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => MyHomePage()),
              );
            },
            child: Text('HomePage'),
          ),
        ],
      ),
    );
  }
}